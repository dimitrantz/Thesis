[comment encoding = UTF-8 /]
[**
 * The documentation of the module TframeSensorBase.
 */]
[module TframeSensorBase('platform:/plugin/SensorProject/model/sensorProject.ecore')]


[**
 * The documentation of the template TframeSensorBase.
 * @param aSensorSystem
 */]
[template public TframeSensorBase(aSensorSystem: SensorSystem) post(trim())]

[file ('factory/tframeSensor.py', false, 'UTF-8')]
"""
@author: Dimitra Ntzioni
 python 2.7
"""

import time

import saveToRedis as redisAPI
from sensor import Sensor

import R4ARobotRestApi as api # R4A Library
from R4ARobotWsApi import RobotWsAPI as rws # R4A Library

api.configuration.api_key['['/]'api_key'[']'/] = 'r4a_default_key'
api.configuration.host = 'localhost:8080'

        
#  Tframe Sensors         
class TframeSensor(Sensor):
    '''Common base class for a Tframe Sensor'''
	
    def __init__(self):
        
        Sensor.__init__(self)
        
        self.category = 'POSITION'
        self.controller = api.SensorsPositionApi()
        self.name = 'Tframe Sensor'
        self.originId = "Accelerometer"
        self.targetId = "FRAME_TORSO"


    def start_measuring(self):
        '''Gets a measurement of the position sensor every 1/max_hz seconds'''
        
        endtime = time.time() + self.duration
       
        # timer's argument in sec
        while time.time() < endtime:
            
            start = time.time()
            self.get_tframe_transformation()
            time_elapsed = time.time() - start

            if self.frequency > time_elapsed:
                time.sleep(self.frequency - time_elapsed)
        

    def get_tframe_transformation(self):
        '''Returns the Tframe transformation of the robot.'''
        
        res = self.controller.getTransformation(self.originId, self.targetId) 
        
        if (hasattr(res, 'pose')):

            redisAPI.save_measurement(self.name,res)

        elif (hasattr(res, 'error')):

            redisAPI.save_measurement(self.name,{'data': res['['/]'error'[']'/], 'timestamp':res['['/]'timestamp'[']'/]})
        

        else:
            tempArray = list()
            tempArray.append(['['/]"ERROR Tframe Transformation Measurement",time.time()[']'/])
            print tempArray
        
[/file]
[/template]
