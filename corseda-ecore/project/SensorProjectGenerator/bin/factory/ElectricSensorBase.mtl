[comment encoding = UTF-8 /]
[**
 * The documentation of the module ElectricSensorBase.
 */]
[module ElectricSensorBase('platform:/plugin/SensorProject/model/sensorProject.ecore')]


[**
 * The documentation of the template generateElement.
 * @param aSensorSystem
 */]
[template public ElectricSensorBase(aSensorSystem: SensorSystem) post(trim())]

[file ('factory/electricSensor.py', false, 'UTF-8')]
"""
@author: Dimitra Ntzioni
 python 2.7
"""
import time

import saveToRedis as redisAPI
from sensor import Sensor

import R4ARobotRestApi as api # R4A Library
from R4ARobotWsApi import RobotWsAPI as rws # R4A Library

api.configuration.api_key['['/]'api_key'[']'/] = 'r4a_default_key'
api.configuration.host = 'localhost:8080'

        
#  Electric Sensors         
class ElectricSensor(Sensor):
    '''Common base class for a ElectriceSensor'''
	
    def __init__(self):
        
        Sensor.__init__(self)
        
        self.category = 'ELECTRIC'
        self.controller = api.SensorsElectricApi()
        self.name = 'ElectricSensor'
        self.type = 'battery'
        self.alarmValue = -1.0
        

    def get_electric_sensor(self):
        '''Function returning a string containing the description of an
           electric sensor.'''
        
        res = self.controller.getElectricSensor(self.type)
        redisAPI.save_sensor_info(self.name, res)

    def get_electric_measurement(self):
        '''Function returning the last measurement of a sensor.'''
                       
        
        res = self.controller.getElectricMeasurement(self.type) 
        

        if (hasattr(res, 'data')):

            redisAPI.save_measurement(self.name,res)

        elif (hasattr(res, 'error')):

            redisAPI.save_measurement(self.name,{'data': res['['/]'error'[']'/], 'timestamp':res['['/]'timestamp'[']'/]})
        else:
            
            tempArray = ['['/]"ERROR Electric Measurement",time.time()[']'/]
            print tempArray

    def start_measuring(self):
        '''Gets a measurement of the electric sensor every 1/freq seconds'''
    
        endtime = time.time() + self.duration
        
        # timer's argument in sec
        while time.time() < endtime:
        
            start = time.time()
            self.get_electric_measurement()
            time_elapsed = time.time() - start

            if self.frequency > time_elapsed:
                time.sleep(self.frequency - time_elapsed)
            
[/file]
[/template]
